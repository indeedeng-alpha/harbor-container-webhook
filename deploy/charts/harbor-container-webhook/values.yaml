# Default values for harbor-container-webhook.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cnmcavoy/harbor-container-webhook
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart version.
  tag: "v0.2.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532

service:
  type: ClusterIP
  port: 9443

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

extraArgs: []
extraEnv: []

certManager:
  enabled: true
  apiVersion: "cert-manager.io/v1alpha2"

webhook:
  namespaceSelector:
    matchExpressions:
      - key: "goharbor.io/harbor-container-webhook-disable"
        operator: NotIn
        values: ["true"]
  objectSelector:
    matchExpressions:
      - key: "goharbor.io/harbor-container-webhook-disable"
        operator: NotIn
        values: ["true"]
  failurePolicy: Ignore

## configures the webhook mode (dynamic or static).
## dynamic mode queries the Harbor API to discover projects, and find projects in harbor with a proxy cache.
## static mode configures a static transformer for pods and rewrites container image in a sed-like fashion.
mode: dynamic
harbor:
  endpoint: "" # (e.g https://harbor.example.com)
  skipTLSVerify: false
  timeout: 1m
  resyncInterval: 1m
  credentials:
    user: "" # must be 'admin' (see: https://github.com/goharbor/harbor/issues/11286)
    pass: "" # must be admin password

certDir: ""
prometheus:
  enabled: true
  port: 8080
healthPort: 8090
verbose: false

dynamic:
  resync_interval: 1m
  timeout: 1m
  skip_tls_verify: false
  harbor_endpoint: https://harbor.example.com
static:
  registry_caches: {}
#    docker.io: "harbor.example.com/dockerhub-proxy"
  timeout: 1m
  skip_tls_verify: false
  harbor_endpoint: https://harbor.example.com
  verify_harbor_api: true
  bypass_image_list:
  - "^goharbor/.*"